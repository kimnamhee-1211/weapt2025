package egovframework.com.baseCrud.service;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.*;

import org.egovframe.rte.fdl.cmmn.EgovAbstractServiceImpl;
import org.mybatis.spring.SqlSessionTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import egovframework.com.login.model.LoginVO;
import static egovframework.com.util.Util.*;


@Service("baseCrudService")
public class BaseCrudServiceImpl extends EgovAbstractServiceImpl implements BaseCrudService{

	@Resource(name = "sqlSessionTemplate")
	private SqlSessionTemplate sqlSession;

	//다중 검색
	@Override
	@Transactional(readOnly = true)
	public List<Map<String, Object>> selectList(String menuId, String component, Map<String, Object> param){

		String mapper = menuId.replaceAll("[^A-Za-z]", "") + "Mapper";
		String methodName = "selectList" + upper1(component);
		String statement = mapper + "." + methodName;

		if (!sqlSession.getConfiguration().hasStatement(statement)) {
			throw new IllegalArgumentException("Unknown statement: " + statement);
		}

		List<Map<String, Object>> result = sqlSession.selectList(statement, param);

		return result;
	}

	//단일 검색
	@Override
	@Transactional(readOnly = true)
	public Map<String, Object> selectOne(String menuId, String component, Map<String, Object>param){

		String mapper = menuId.replaceAll("[^A-Za-z]", "") + "Mapper";
		String methodName = "selectList" + upper1(component);
		String statement = mapper + "." + methodName;

		if (!sqlSession.getConfiguration().hasStatement(statement)) {
			throw new IllegalArgumentException("Unknown statement: " + statement);
		}

		Map<String, Object> result = sqlSession.selectOne(statement, param);

		return result;
	}

	//다중 저장
	@Override
	public int insertList(String menuId, String component, List<Map<String, Object>> param){

		String mapper = menuId.replaceAll("[^A-Za-z]", "") + "Mapper";
		String methodName = "selectList" + upper1(component);
		String statement = mapper + "." + methodName;

		if (!sqlSession.getConfiguration().hasStatement(statement)) {
			throw new IllegalArgumentException("Unknown statement: " + statement);
		}

		int resultRowCount = sqlSession.insert(statement, param);

		return resultRowCount;
	}

	//단일 수정
	@Override
	public int insertOne(String menuId, String component, Map<String, Object> param){

		String mapper = menuId.replaceAll("[^A-Za-z]", "") + "Mapper";
		String methodName = "selectList" + upper1(component);
		String statement = mapper + "." + methodName;

		if (!sqlSession.getConfiguration().hasStatement(statement)) {
			throw new IllegalArgumentException("Unknown statement: " + statement);
		}

		int resultRowCount = sqlSession.insert(statement, param);

		return resultRowCount;
	}
	
	//다중 저장
	@Override
	public int updateList(String menuId, String component, List<Map<String, Object>> param){

		String mapper = menuId.replaceAll("[^A-Za-z]", "") + "Mapper";
		String methodName = "selectList" + upper1(component);
		String statement = mapper + "." + methodName;

		if (!sqlSession.getConfiguration().hasStatement(statement)) {
			throw new IllegalArgumentException("Unknown statement: " + statement);
		}

		int resultRowCount = sqlSession.update(statement, param);

		return resultRowCount;
	}

	//단일 수정
	@Override
	public int updateOne(String menuId, String component, Map<String, Object> param){

		String mapper = menuId.replaceAll("[^A-Za-z]", "") + "Mapper";
		String methodName = "selectList" + upper1(component);
		String statement = mapper + "." + methodName;

		if (!sqlSession.getConfiguration().hasStatement(statement)) {
			throw new IllegalArgumentException("Unknown statement: " + statement);
		}

		int resultRowCount = sqlSession.update(statement, param);

		return resultRowCount;
	}

	//다중 저장 + 수정
	@Override
	@Transactional(rollbackFor = Exception.class)
	public int insertUpdateList(String menuId, String component, Map<String, Object> param, LoginVO loginUser){

		String mapper = menuId.replaceAll("[^A-Za-z]", "") + "Mapper";
		String methodName = "selectList" + upper1(component);
		String statement = mapper + "." + methodName;

		if (!sqlSession.getConfiguration().hasStatement(statement)) {
			throw new IllegalArgumentException("Unknown statement: " + statement);
		}
		
		List<Map<String, Object>> insertParam = (List<Map<String, Object>>) param.get("insertParam");
		List<Map<String, Object>> updateParam = (List<Map<String, Object>>) param.get("updateParam");
		

		int resultInsertRowCount = 0;
		int resultUpdateRowCount = 0;

		if(insertParam != null && !insertParam.isEmpty()){
			for(Map<String, Object> row : insertParam){
				row.put("userId", loginUser.getUserId());
			}
			resultInsertRowCount = sqlSession.insert(statement, param);

		}

		if(updateParam != null && !updateParam.isEmpty()){
			for(Map<String, Object> row : updateParam){
				row.put("userId", loginUser.getUserId());
			}
			resultUpdateRowCount = sqlSession.update(statement, param);
		}

		if(resultInsertRowCount != insertParam.size() || resultUpdateRowCount != updateParam.size()){
			throw new RuntimeException("insert/update 실패, 롤백 처리");
		}

		int resultRowCount = resultInsertRowCount + resultInsertRowCount;

		return resultRowCount;
	}
	
}





